/**
 * run with SWI-Prolog
 **
 * Project Euler problem #12 (https://projecteuler.net/problem=12)
 **
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */

% should work, but takes forever:
% ?- triangleWithDivisors(500). 

% the Nth triangle number has over X divisors
triangleWithDivisors(X) :- triangleWithDivisors(1,X).
triangleWithDivisors(N,X) :- 
  triangleNumber(N,T),
  factorsOf(T,List),
  length(List,L),
  L > X -> 
    write(N), write("th triangle number is "), write(T), write("."), nl,
    write("It is the first triangle number to have over "), write(X), write(" divisors."), !
      ; N1 is N + 1, 
      triangleWithDivisors(N1,X).

% Nth triangle number is X
triangleNumber(N,_) :- N=<0, !, false.
triangleNumber(1,1).
triangleNumber(N,X) :-
  M is N - 1,
  triangleNumber(M,Y),
  X is N + Y.

% get a List of the factors of N
factorsOf(0,_) :- !, false.
factorsOf(N,List) :- setof(B, (between(1,N,B), N mod B =:= 0 ), List).


