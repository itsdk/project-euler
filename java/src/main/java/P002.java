package main.java;

import java.util.ArrayList;

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed 
 * four million, find the sum of the even-valued terms.
 */

public class P002 extends Problem {
	
	final static double value = 4000000; // value of fibonacci number to not exceed

	@Override
	public String solve() {
		int evenFibSum = 0; // sum of even fibonacci numbers, to return
		
		// estimate how many fibonacci numbers <= value
		int capacity = (int) numberOfFibonaccis(value);
		
		// start fibonacci sequence
		ArrayList<Integer> fibonacci = new ArrayList<Integer>(capacity); 
		fibonacci.add(0);
		fibonacci.add(1);
		int size = 2; // numbers in fibonacci sequence so far
		
		// calculate all fibonacci numbers <= value
		while (fibonacci.get(size-1) + fibonacci.get(size-2) <= value) {
			fibonacci.add(fibonacci.get(size-1) + fibonacci.get(size-2));
			size++;
			
			// add to the sum, if even
			if (fibonacci.get(size-1) % 2 == 0) {
				evenFibSum += fibonacci.get(size-1);
			}
		}
				
		return Integer.toString(evenFibSum);
	}
	
	/*
	 * estimate how many fibonacci numbers <= value, using Binet's formula
	 */
	public double numberOfFibonaccis(double value) {
		double phi = (1 + Math.sqrt(5))/2;
		return 1 + (Math.log((Math.sqrt(5))*(value+0.5)))/(Math.log(phi));
	}

}
